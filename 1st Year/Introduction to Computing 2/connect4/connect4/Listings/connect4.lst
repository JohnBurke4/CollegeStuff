


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000         
    8 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
    9 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   10 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   11 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   12 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   13 00000000         
   14 00000000 0000002A 
                       SIZE    EQU              0x2A
   15 00000000 00000006 
                       ROWS    EQU              0x06
   16 00000000 00000007 
                       COLS    EQU              0x07
   17 00000000         
   18 00000000         
   19 00000000                 AREA             globals, DATA, READWRITE
   20 00000000 00 00 00 
              00 00 00 
              00       BOARD   DCB              0,0,0,0,0,0,0
   21 00000007 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   22 0000000E 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   23 00000015 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   24 0000001C 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   25 00000023 00 00 00 
              00 00 00 
              00               DCB              0,0,0,0,0,0,0
   26 0000002A         
   27 0000002A         
   28 0000002A                 AREA             RESET, CODE, READONLY
   29 00000000                 ENTRY
   30 00000000         
   31 00000000         ; initialise SP to top of RAM
   32 00000000         
   33 00000000 E59FD7C0        LDR              R13, =0x40010000 ; initialse SP
                                                            
   34 00000004         
   35 00000004         ; initialise the console
   36 00000004 EB000050        BL               inithw
   37 00000008         



ARM Macro Assembler    Page 2 


   38 00000008         ;
   39 00000008         ; your program goes here
   40 00000008         ;
   41 00000008         
   42 00000008         ; initilising some variables
   43 00000008 E3A08058        LDR              R8, =0x58   ; player1 = X
   44 0000000C E3A0904F        LDR              R9, =0x4F   ; player2 = O
   45 00000010 E3A0A000        LDR              R10, =0x0   ; gameOver = false
   46 00000014 E1A0B008        MOV              R11, R8     ; currentMove = X
   47 00000018 E3A0C002        LDR              R12, =2     ; computer last mov
                                                            e = 3
   48 0000001C E3A06000        LDR              R6, =0      ; movesMade = 0
   49 00000020 E3A07000        LDR              R7, =0      ; computer = true;
   50 00000024 E59F07A0        LDR              R0, =str_go
   51 00000028         
   52 00000028 EB000060        BL               puts        ;
   53 0000002C E59F079C        LDR              R0, =str_game
   54 00000030 EB00005E        BL               puts
   55 00000034 EB00004B        BL               get         ; check if player w
                                                            ants a human or com
                                                            puter opponent
   56 00000038 E3500031        CMP              R0, #0x31   ; if 1 play against
                                                             human otherwise no
                                                            t
   57 0000003C 1A000000        BNE              L110
   58 00000040 E3A07001        MOV              R7, #1
   59 00000044         
   60 00000044         
   61 00000044         L110
   62 00000044 E59F0788        LDR              R0, =BOARD  ;
   63 00000048 E3A0102A        LDR              R1, =SIZE   ;
   64 0000004C EB000073        BL               initBoard   ; initise board
   65 00000050         
   66 00000050 E59F077C        LDR              R0, =BOARD  ;
   67 00000054 E3A0102A        LDR              R1, = SIZE
   68 00000058 EB00005C        BL               disBoard    ; display board
   69 0000005C         
   70 0000005C E35A0000 
                       L4      CMP              R10, #0x0   ; while !gameOver
   71 00000060 1A000030        BNE              L2
   72 00000064         
   73 00000064 E1A0000B 
                       L3      MOV              R0, R11
   74 00000068 EB000090        BL               disMove     ; display whose mov
                                                            e it is to console
   75 0000006C         
   76 0000006C E3570000        CMP              R7, #0
   77 00000070 1A000001        BNE              L112
   78 00000074 E35B004F        CMP              R11, #0x4F
   79 00000078 0A00002B        BEQ              L100
   80 0000007C         L112
   81 0000007C EB000096        BL               takeMove    ; ask the user to m
                                                            ake a move
   82 00000080 E1A04000        MOV              R4, R0
   83 00000084         
   84 00000084 E1A00004        MOV              R0, R4
   85 00000088 E59F1744        LDR              R1, =BOARD
   86 0000008C EB00006E        BL               checkMove   ; check if there is
                                                             space to make that



ARM Macro Assembler    Page 3 


                                                             mvoe
   87 00000090 E3500001        CMP              R0, #1
   88 00000094 1A000017        BNE              L1
   89 00000098         L101
   90 00000098 E1A0000B        MOV              R0, R11
   91 0000009C E1A01004        MOV              R1, R4
   92 000000A0 E59F272C        LDR              R2, =BOARD
   93 000000A4 EB000072        BL               makeMove    ; if space make the
                                                             move
   94 000000A8 E1A05000        MOV              R5, R0
   95 000000AC         
   96 000000AC E59F0720        LDR              R0, =BOARD  ;
   97 000000B0 E3A0102A        LDR              R1, = SIZE
   98 000000B4 EB000045        BL               disBoard    ; display the board
                                                            
   99 000000B8         
  100 000000B8         
  101 000000B8 E1A0000B        MOV              R0, R11
  102 000000BC E1A01004        MOV              R1, R4
  103 000000C0 E1A02005        MOV              R2, R5
  104 000000C4 E59F3708        LDR              R3, =BOARD
  105 000000C8 EB000097        BL               checkWin    ; check if move was
                                                             winning move
  106 000000CC E3500001        CMP              R0, #1
  107 000000D0 0A00000E        BEQ              L7
  108 000000D4         
  109 000000D4 E2866001 
                       L8      ADD              R6, R6, #1  ; movesMade++
  110 000000D8 E356002A        CMP              R6, #SIZE   ; is board full?
  111 000000DC AA00000F        BGE              L20
  112 000000E0 E15B0008        CMP              R11, R8     ; check and change 
                                                            whose turn it is
  113 000000E4 0A000001        BEQ              L5
  114 000000E8 E1A0B008        MOV              R11, R8
  115 000000EC EA000000        B                L6
  116 000000F0 E1A0B009 
                       L5      MOV              R11, R9
  117 000000F4 EAFFFFD8 
                       L6      B                L4
  118 000000F8         L1
  119 000000F8 E59F06D8        LDR              R0, =str_tryAgain ; if illegal 
                                                            move display so
  120 000000FC EB00002B        BL               puts
  121 00000100 E59F06CC        LDR              R0, =BOARD  ;
  122 00000104 E3A0102A        LDR              R1, = SIZE
  123 00000108 EB000030        BL               disBoard    ; display move
  124 0000010C         
  125 0000010C EAFFFFD4        B                L3
  126 00000110         
  127 00000110         L7
  128 00000110 E1A0000B        MOV              R0, R11
  129 00000114 EB0000C9        BL               disWinner   ; if winner display
                                                             so
  130 00000118 E3A0A001        MOV              R10, #1
  131 0000011C EAFFFFEC        B                L8
  132 00000120         
  133 00000120         L20
  134 00000120 E59F06B4        LDR              R0, =str_draw ; if board is ful
                                                            l display draw



ARM Macro Assembler    Page 4 


  135 00000124 EB000021        BL               puts
  136 00000128         
  137 00000128         L2
  138 00000128 EAFFFFFE 
                       stop    B                stop
  139 0000012C         
  140 0000012C         L100
  141 0000012C E1A00008        MOV              R0, R8
  142 00000130 E1A01009        MOV              R1, R9
  143 00000134 E59F2698        LDR              R2, =BOARD
  144 00000138 E1A0300C        MOV              R3, R12
  145 0000013C EB00010E        BL               computerMove ; compute move col
                                                            umn for computer
  146 00000140 E1A04000        MOV              R4, R0      ; save move
  147 00000144 E1A0C000        MOV              R12, R0     ; save previous mov
                                                            e
  148 00000148 EAFFFFD2        B                L101
  149 0000014C         
  150 0000014C         
  151 0000014C         ;
  152 0000014C         ; your subroutines go here
  153 0000014C         ;
  154 0000014C         
  155 0000014C         
  156 0000014C         
  157 0000014C         
  158 0000014C         ;
  159 0000014C         ; inithw subroutines
  160 0000014C         ; performs hardware initialisation, including console
  161 0000014C         ; parameters:
  162 0000014C         ; none
  163 0000014C         ; return value:
  164 0000014C         ; none
  165 0000014C         ;
  166 0000014C         inithw
  167 0000014C E59F068C        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  168 00000150 E3A01050        MOV              R1, #0x50
  169 00000154 E5C01000        STRB             R1, [R0]
  170 00000158 E59F0684        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  171 0000015C E3A01002        LDR              R1, =0x02
  172 00000160 E5C01000        STRB             R1, [R0]
  173 00000164 E12FFF1E        BX               LR
  174 00000168         
  175 00000168         ;
  176 00000168         ; get subroutine
  177 00000168         ; returns the ASCII code of the next character read on t
                       he console
  178 00000168         ; parameters:
  179 00000168         ; none
  180 00000168         ; return value:
  181 00000168         ; R0 - ASCII code of the character read on teh console (
                       byte)
  182 00000168         ;
  183 00000168 E59F1678 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  184 0000016C E5910000 



ARM Macro Assembler    Page 5 


                       get0    LDR              R0, [R1]    ; wait until
  185 00000170 E2100001        ANDS             R0, #0x01   ; receiver data
  186 00000174 0AFFFFFC        BEQ              get0        ; ready
  187 00000178 E59F166C        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  188 0000017C E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  189 00000180 E12FFF1E        BX               LR          ; return
  190 00000184         
  191 00000184         ;
  192 00000184         ; put subroutine
  193 00000184         ; writes a character to the console
  194 00000184         ; parameters:
  195 00000184         ; R0 - ASCII code of the character to write
  196 00000184         ; return value:
  197 00000184         ; none
  198 00000184         ;
  199 00000184 E59F165C 
                       put     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  200 00000188 E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  201 0000018C E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  202 00000190 0AFFFFFB        BEQ              put         ; empty
  203 00000194 E59F1650        LDR              R1, =U0THR  ; R1 -> U0THR
  204 00000198 E5C10000        STRB             R0, [R1]    ; output charcter
  205 0000019C E59F1644 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  206 000001A0 E5D11000        LDRB             R1, [R1]    ; wait until
  207 000001A4 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  208 000001A8 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  209 000001AC E12FFF1E        BX               LR          ; return
  210 000001B0         
  211 000001B0         ;
  212 000001B0         ; puts subroutine
  213 000001B0         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  214 000001B0         ; parameters:
  215 000001B0         ; R0 - address of NULL-terminated ASCII string
  216 000001B0         ; return value:
  217 000001B0         ; R0 - ASCII code of the character read on teh console (
                       byte)
  218 000001B0         ;
  219 000001B0 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  220 000001B4 E1A04000        MOV              R4, R0      ; copy R0
  221 000001B8 E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  222 000001BC E3500000        CMP              R0, #0      ; 0?
  223 000001C0 0A000001        BEQ              puts1       ; return
  224 000001C4 EBFFFFEE        BL               put         ; put character
  225 000001C8 EAFFFFFA        B                puts0       ; next character
  226 000001CC E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  227 000001D0         



ARM Macro Assembler    Page 6 


  228 000001D0         ; disBoard subroutine
  229 000001D0         ; displays the connect 4 board to the console
  230 000001D0         ; parameters:
  231 000001D0         ; R0 - start address of board stored in memory
  232 000001D0         ; R1 - size of board
  233 000001D0         ; return value:
  234 000001D0         ; nothing
  235 000001D0         
  236 000001D0 E92D47F0 
                       disBoard
                               PUSH             {R4-R10, lr}
  237 000001D4 E3A04000        LDR              R4, =0      ; count = 0
  238 000001D8 E1A06001        MOV              R6, R1      ; size
  239 000001DC E1A05000        MOV              R5, R0      ; currentAddress
  240 000001E0 E3A08000        LDR              R8, =0      ; initilise char in
                                                             row count
  241 000001E4 E1560004 
                       disBoard3
                               CMP              R6, R4      ; count >= size?
  242 000001E8 DA000009        BLE              disBoard1
  243 000001EC E4D50001        LDRB             R0, [R5], #1 ; load char from b
                                                            oard
  244 000001F0 E2844001        ADD              R4, R4, #1  ; increment count 
  245 000001F4 E2888001        ADD              R8, R8, #1  ; increment char co
                                                            unt of row 
  246 000001F8 EBFFFFE1        BL               put
  247 000001FC E3580007        CMP              R8, #7      ; if chars in row i
                                                            s 7 display new lin
                                                            e
  248 00000200 1A000002        BNE              disBoard2
  249 00000204 E59F05E4        LDR              R0, =str_newl ;
  250 00000208 E3A08000        LDR              R8, =0
  251 0000020C EBFFFFE7        BL               puts
  252 00000210 EAFFFFF3 
                       disBoard2
                               B                disBoard3
  253 00000214         
  254 00000214         disBoard1
  255 00000214 E59F05D8        LDR              R0, =str_help ; display instruc
                                                            tions
  256 00000218 EBFFFFE4        BL               puts
  257 0000021C E8BD87F0        POP{R4-R10,      pc}
  258 00000220         
  259 00000220         
  260 00000220         ; initBoard subroutine
  261 00000220         ; initilises a blank connect4 board and stores it in mem
                       ory
  262 00000220         ; parameters:
  263 00000220         ; R0 - start address in memory of space stored for board
                       
  264 00000220         ; R1 - size of board
  265 00000220         ; return vslue:
  266 00000220         ; nothing
  267 00000220         
  268 00000220 E92D47F0 
                       initBoard
                               PUSH{R4-R10,     lr}
  269 00000224         
  270 00000224 E1A04000        MOV              R4, R0      ; current address i



ARM Macro Assembler    Page 7 


                                                            n board
  271 00000228 E1A06001        MOV              R6, R1      ; size
  272 0000022C E3A07000        LDR              R7, =0      ; init count
  273 00000230 E1560007 
                       initBoard2
                               CMP              R6, R7      ;
  274 00000234 9A000003        BLS              initBoard1
  275 00000238 E3A0502D        LDR              R5, =0x2D   ; change char to '-
                                                            '
  276 0000023C E4C45001        STRB             R5, [R4], #1
  277 00000240 E2877001        ADD              R7, R7, #1
  278 00000244 EAFFFFF9        B                initBoard2
  279 00000248         
  280 00000248 E8BD87F0 
                       initBoard1
                               POP{R4-R10,      pc}
  281 0000024C         
  282 0000024C         ; checkMove Subroutine
  283 0000024C         ; checks if a move on a given column is valid
  284 0000024C         ; parameters:
  285 0000024C         ; R0 - column in which the move is wanted
  286 0000024C         ; R1 - start address of board 
  287 0000024C         ; return values:
  288 0000024C         ; R0 - boolean for if move is valid
  289 0000024C         
  290 0000024C E92D47F0 
                       checkMove
                               PUSH{R4-R10,     lr}
  291 00000250         
  292 00000250 E0804001        ADD              R4, R0, R1
  293 00000254 E3A05007        LDR              R5, =COLS
  294 00000258 E6D46005 
                       checkMove3
                               LDRB             R6, [R4], R5 ; load char from c
                                                            ol in array
  295 0000025C E356002D        CMP              R6, #0x2D   ; check if char is 
                                                            an empty space
  296 00000260 1A000001        BNE              checkMove2
  297 00000264 E3A00001        MOV              R0, #1
  298 00000268 EA000000        B                checkMove4
  299 0000026C E3A00000 
                       checkMove2
                               MOV              R0, #0
  300 00000270 E8BD87F0 
                       checkMove4
                               POP{R4-R10,      pc}
  301 00000274         
  302 00000274         ; makeMove subroutine
  303 00000274         ; puts a piece down on the board
  304 00000274         ; parameters:
  305 00000274         ; R0 - character of current player
  306 00000274         ; R1 - column of which to put the piece
  307 00000274         ; R2 - start address of board
  308 00000274         ; return values:
  309 00000274         ; R0 - row where move was made
  310 00000274         
  311 00000274 E92D47F0 
                       makeMove
                               PUSH{R4-R10,     lr}



ARM Macro Assembler    Page 8 


  312 00000278 E1A04000        MOV              R4, R0
  313 0000027C E0815002        ADD              R5, R1, R2
  314 00000280 E3A06007        LDR              R6, =COLS
  315 00000284 E3A09000        LDR              R9, =0      ; initial row = 0
  316 00000288 E5D57000 
                       makeMove3
                               LDRB             R7, [R5]    ; currentRow 
  317 0000028C E7D58006        LDRB             R8, [R5, R6] ; nextRow
  318 00000290 E358002D        CMP              R8, #0x2D   ; compare next row 
                                                            to empty space
  319 00000294 1A000002        BNE              makeMove2   ; if next row is no
                                                            t empty, place char
                                                             in current row
  320 00000298 E0855006        ADD              R5, R5, R6  ; add col
  321 0000029C E2899001        ADD              R9, R9, #1
  322 000002A0 EAFFFFF8        B                makeMove3
  323 000002A4         
  324 000002A4         makeMove2
  325 000002A4 E5C54000        STRB             R4, [R5]    ; store char in boa
                                                            rd
  326 000002A8 E1A00009        MOV              R0, R9
  327 000002AC E8BD87F0        POP{R4-R10,      pc}
  328 000002B0         
  329 000002B0         
  330 000002B0         ; disMove subroutine
  331 000002B0         ; displays whos move it is
  332 000002B0         ; parameters:
  333 000002B0         ; R0 - character of current player
  334 000002B0         ; return values;
  335 000002B0         ; R0 - 0 if player1, 1 if player2
  336 000002B0 E92D47F0 
                       disMove PUSH{R4-R10,     lr}
  337 000002B4 E1A04000        MOV              R4, R0
  338 000002B8 EBFFFFB1        BL               put
  339 000002BC E59F0534        LDR              R0, =str_turn ; display whos tu
                                                            rn string
  340 000002C0 EBFFFFBA        BL               puts
  341 000002C4 E3540058        CMP              R4, #0x58   ; check if move is 
                                                            'X'
  342 000002C8 0A000001        BEQ              disMove1
  343 000002CC E3A00001        MOV              R0, #1
  344 000002D0 E8BD87F0 
                       disMove2
                               POP{R4-R10,      pc}
  345 000002D4 E3A00000 
                       disMove1
                               MOV              R0, #0
  346 000002D8 EAFFFFFC        B                disMove2
  347 000002DC         
  348 000002DC         
  349 000002DC         
  350 000002DC         ; takeMove subroutine
  351 000002DC         ; stores the move a player makes from the console
  352 000002DC         ; parameters:
  353 000002DC         ; nothing
  354 000002DC         ; return values:
  355 000002DC         ; R0 - column in which move was made
  356 000002DC         
  357 000002DC E92D47F0 



ARM Macro Assembler    Page 9 


                       takeMove
                               PUSH{R4-R10,     lr}
  358 000002E0 EBFFFFA0 
                       takeMove2
                               BL               get         ;
  359 000002E4 EBFFFFA6        BL               put         ;
  360 000002E8 E1A04000        MOV              R4, R0
  361 000002EC E3A06007        LDR              R6, =COLS   ; check if char asc
                                                            ii inputted are bet
                                                            ween '1' and the nu
                                                            mber of columns
  362 000002F0 E2865030        ADD              R5, R6, #0x30
  363 000002F4 E3540031        CMP              R4, #0x31
  364 000002F8 BA000008        BLT              takeMove1
  365 000002FC E1540005        CMP              R4, R5
  366 00000300 CA000006        BGT              takeMove1
  367 00000304         
  368 00000304 E2404031        SUB              R4, R0, #0x31 ; returns the hex
                                                            idecimal value of c
                                                            olumn input
  369 00000308 E59F04E0        LDR              R0, =str_newl ; display some ne
                                                            w lines to increase
                                                             readability
  370 0000030C EBFFFFA7        BL               puts
  371 00000310 E59F04D8        LDR              R0, =str_newl ; display new lin
                                                            e for readability
  372 00000314 EBFFFFA5        BL               puts
  373 00000318 E1A00004        MOV              R0, R4
  374 0000031C E8BD87F0        POP{R4-R10,      pc}
  375 00000320         
  376 00000320         takeMove1
  377 00000320 E59F04B0        LDR              R0, =str_tryAgain ; if move is 
                                                            invalid tell them t
                                                            o try again
  378 00000324 EBFFFFA1        BL               puts
  379 00000328 EAFFFFEC        B                takeMove2
  380 0000032C         
  381 0000032C         
  382 0000032C         
  383 0000032C         ; checkWin subroutine
  384 0000032C         ; checks to see if the last move was a winning move
  385 0000032C         ; parameters: 
  386 0000032C         ; R0 - current player
  387 0000032C         ; R1 - column of move
  388 0000032C         ; R2 - row of move
  389 0000032C         ; R3 - address of board
  390 0000032C         ; return values
  391 0000032C         ; R0 - boolean if winning move or not
  392 0000032C         
  393 0000032C E92D4FF0 
                       checkWin
                               PUSH{R4-R11,     lr}
  394 00000330 E1A04000        MOV              R4, R0
  395 00000334 E1A05001        MOV              R5, R1
  396 00000338 E1A06002        MOV              R6, R2
  397 0000033C E1A07003        MOV              R7, R3
  398 00000340         
  399 00000340 E1A02007        MOV              R2, R7
  400 00000344 EB000014        BL               checkWinCol



ARM Macro Assembler    Page 10 


  401 00000348 E3500001        CMP              R0, #1      ; check if winner w
                                                            as returned
  402 0000034C 0A000011        BEQ              checkWin1
  403 00000350 E1A00004        MOV              R0, R4
  404 00000354 E1A01006        MOV              R1, R6
  405 00000358 E1A02007        MOV              R2, R7
  406 0000035C EB000023        BL               checkWinRow
  407 00000360 E3500001        CMP              R0, #1      ; check if winner w
                                                            as returned
  408 00000364 0A00000B        BEQ              checkWin1
  409 00000368         
  410 00000368 E1A00004        MOV              R0, R4
  411 0000036C E1A01005        MOV              R1, R5
  412 00000370 E1A02006        MOV              R2, R6
  413 00000374 E1A03007        MOV              R3, R7
  414 00000378 EB000037        BL               checkWinDTop
  415 0000037C E3500001        CMP              R0, #1      ; check if winner w
                                                            as returned
  416 00000380 0A000004        BEQ              checkWin1
  417 00000384         
  418 00000384 E1A00004        MOV              R0, R4
  419 00000388 E1A01005        MOV              R1, R5
  420 0000038C E1A02006        MOV              R2, R6
  421 00000390 E1A03007        MOV              R3, R7
  422 00000394 EB000054        BL               checkWinDBot
  423 00000398         
  424 00000398         
  425 00000398 E8BD8FF0 
                       checkWin1
                               POP{R4-R11,      pc}
  426 0000039C         
  427 0000039C         
  428 0000039C         
  429 0000039C         ; checkWinCol subroutine
  430 0000039C         ; checks to see if a given column has four in a row
  431 0000039C         ; parameters:
  432 0000039C         ; R0 - currentPlayer
  433 0000039C         ; R1 - column of move
  434 0000039C         ; R2 - address of board
  435 0000039C         ; return values:
  436 0000039C         ; R0 - boolean if winning move
  437 0000039C         
  438 0000039C         checkWinCol
  439 0000039C E92D47F0        PUSH{R4-R10,     lr}
  440 000003A0 E0814002        ADD              R4, R1, R2
  441 000003A4 E1A05000        MOV              R5, R0
  442 000003A8 E3A00000        LDR              R0, =0      ; isWinner = false
  443 000003AC E3A06000        LDR              R6, =0      ;count = 0
  444 000003B0 E3A07007        LDR              R7, =COLS
  445 000003B4 E3A0902A        LDR              R9, = SIZE
  446 000003B8 E082A009        ADD              R10, R2, R9 ; end postion of bo
                                                            ard
  447 000003BC         checkWinCol3
  448 000003BC E154000A        CMP              R4, R10     ; checks if current
                                                             char is outside of
                                                             board
  449 000003C0 CA000009        BGT              checkWinCol1
  450 000003C4 E6D48007        LDRB             R8, [R4], R7 ; loads char from 
                                                            board and offsets a



ARM Macro Assembler    Page 11 


                                                            ddress by number of
                                                             columns
  451 000003C8 E1580005        CMP              R8, R5      ; checks if char is
                                                             same as current pl
                                                            ayer
  452 000003CC 0A000001        BEQ              checkWinCol2
  453 000003D0 E3A06000        MOV              R6, #0      ; if not reset coun
                                                            t
  454 000003D4 EAFFFFF8        B                checkWinCol3
  455 000003D8         
  456 000003D8         checkWinCol2
  457 000003D8 E2866001        ADD              R6, R6, #1  ; increment count
  458 000003DC E3560004        CMP              R6, #4      ; checks if count i
                                                            s at least 4 and re
                                                            turns winner if so
  459 000003E0 AA000000        BGE              checkWinCol4
  460 000003E4 EAFFFFF4        B                checkWinCol3
  461 000003E8         
  462 000003E8         checkWinCol4
  463 000003E8 E3A00001        MOV              R0, #1
  464 000003EC         checkWinCol1
  465 000003EC E8BD87F0        POP{R4-R10,      pc}
  466 000003F0         
  467 000003F0         
  468 000003F0         ; checkWinRow subroutine
  469 000003F0         ; checks to see if a move won on a given row
  470 000003F0         ; parameters:
  471 000003F0         ; R0 - currentPlayer
  472 000003F0         ; R1 - row of move
  473 000003F0         ; R2 - address of board
  474 000003F0         ; return values
  475 000003F0         ; R0 - boolean if winning move or not
  476 000003F0         checkWinRow
  477 000003F0 E92D47F0        PUSH{R4-R10,     lr}
  478 000003F4 E3A04007        LDR              R4, =COLS
  479 000003F8 E0050491        MUL              R5, R1, R4
  480 000003FC E0855002        ADD              R5, R5, R2  ; change current ch
                                                            ar to first char in
                                                             row
  481 00000400 E0856004        ADD              R6, R5, R4  ; change end addres
                                                            s to next row
  482 00000404 E3A07000        LDR              R7, =0      ; count = 0
  483 00000408         checkWinRow4
  484 00000408 E1550006        CMP              R5, R6      ; compare current c
                                                            har to next row
  485 0000040C AA000009        BGE              checkWinRow2
  486 00000410 E4D58001        LDRB             R8, [R5], #1 ; load char and in
                                                            crement address
  487 00000414 E1500008        CMP              R0, R8      ; compare char to c
                                                            urrent player
  488 00000418 0A000001        BEQ              checkWinRow3
  489 0000041C E3A07000        MOV              R7, #0      ; reset count
  490 00000420 EAFFFFF8        B                checkWinRow4
  491 00000424         
  492 00000424         checkWinRow3
  493 00000424 E2877001        ADD              R7, R7, #1  ; increment count
  494 00000428 E3570004        CMP              R7, #4      ; compare count to 
                                                            4 and return winner
                                                             if true



ARM Macro Assembler    Page 12 


  495 0000042C 1AFFFFF5        BNE              checkWinRow4
  496 00000430 E3A00001        MOV              R0, #1
  497 00000434         checkWinRow1
  498 00000434 E8BD87F0        POP{R4-R10,      pc}
  499 00000438         
  500 00000438         checkWinRow2
  501 00000438 E3A00000        MOV              R0, #0
  502 0000043C EAFFFFFC        B                checkWinRow1
  503 00000440         
  504 00000440         ; disWinner subroutine
  505 00000440         ; displays a winner if one exists
  506 00000440         ; parameters:
  507 00000440         ; R0 - winning player
  508 00000440         ; return values:
  509 00000440         ; nothing
  510 00000440         
  511 00000440 E92D47F0 
                       disWinner
                               PUSH{R4-R10,     lr}
  512 00000444 E1A04000        MOV              R4, R0
  513 00000448 E59F03AC        LDR              R0, =str_win
  514 0000044C EBFFFF57        BL               puts
  515 00000450 E1A00004        MOV              R0, R4
  516 00000454 EBFFFF4A        BL               put
  517 00000458 E8BD87F0        POP              {R4-R10, pc}
  518 0000045C         
  519 0000045C         ; checkWinDTop subroutine
  520 0000045C         ; checks if a move was a winner in the top left diagonal
                       
  521 0000045C         ; parameters:
  522 0000045C         ; R0 - current player
  523 0000045C         ; R1 - column of move
  524 0000045C         ; R2 - row of move
  525 0000045C         ; R3 - address of board
  526 0000045C         ; return values:
  527 0000045C         ; R0 - boolean if winning move or not
  528 0000045C         
  529 0000045C E92D4FF0 
                       checkWinDTop
                               PUSH{R4-R11,     lr}
  530 00000460 E1A04000        MOV              R4, R0      ;
  531 00000464 E1A05001        MOV              R5, R1      ; col
  532 00000468 E1A06002        MOV              R6, R2      ; row
  533 0000046C E1A07003        MOV              R7, R3      ;
  534 00000470 E3A00000        MOV              R0, #0
  535 00000474 E3A0B000        LDR              R11, = 0    ; count
  536 00000478         
  537 00000478         checkWinDTop3
  538 00000478 E3550000        CMP              R5, #0
  539 0000047C 0A000004        BEQ              checkWinDTop2 ; keeps removing 
                                                            one from the row an
                                                            d column till one i
                                                            s at 0
  540 00000480 E3560000        CMP              R6, #0
  541 00000484 0A000002        BEQ              checkWinDTop2
  542 00000488 E2455001        SUB              R5, R5, #1
  543 0000048C E2466001        SUB              R6, R6, #1
  544 00000490 EAFFFFF8        B                checkWinDTop3
  545 00000494         



ARM Macro Assembler    Page 13 


  546 00000494         checkWinDTop2
  547 00000494 E0878005        ADD              R8, R7, R5  ; calculates the po
                                                            sition of the curre
                                                            nt char in the boar
                                                            d
  548 00000498 E3A0A007        LDR              R10, =COLS
  549 0000049C E0090A96        MUL              R9, R6, R10
  550 000004A0 E0888009        ADD              R8, R8, R9
  551 000004A4 E5D89000        LDRB             R9, [R8]
  552 000004A8 E1590004        CMP              R9, R4      ; checks if char in
                                                             board is same as p
                                                            ersons move
  553 000004AC 0A000001        BEQ              checkWinDTop4
  554 000004B0 E3A0B000        MOV              R11, #0     ; reset count
  555 000004B4 EA000003        B                checkWinDTop5
  556 000004B8         
  557 000004B8         checkWinDTop4
  558 000004B8 E28BB001        ADD              R11, R11, #1 ; increase count b
                                                            y 1
  559 000004BC E35B0004        CMP              R11, #4     ; if count is at le
                                                            ase 4 return winner
                                                            
  560 000004C0 0A000007        BEQ              checkWinDTop6
  561 000004C4 EAFFFFFF        B                checkWinDTop5
  562 000004C8         
  563 000004C8         checkWinDTop5                        ; increments row an
                                                            d column until reac
                                                            hes end of board
  564 000004C8 E3550006        CMP              R5, #6
  565 000004CC 0A000005        BEQ              checkWinDTop1
  566 000004D0 E3560005        CMP              R6, #5
  567 000004D4 0A000003        BEQ              checkWinDTop1
  568 000004D8 E2855001        ADD              R5, R5, #1
  569 000004DC E2866001        ADD              R6, R6, #1
  570 000004E0 EAFFFFEB        B                checkWinDTop2
  571 000004E4         
  572 000004E4         
  573 000004E4         checkWinDTop6
  574 000004E4 E3A00001        MOV              R0, #1
  575 000004E8         
  576 000004E8 E8BD8FF0 
                       checkWinDTop1
                               POP{R4-R11,      pc}
  577 000004EC         
  578 000004EC         ; checkWinDBot subroutine
  579 000004EC         ; checks if a move was a winner in the bottom left diago
                       nal
  580 000004EC         ; parameters:
  581 000004EC         ; R0 - current player
  582 000004EC         ; R1 - column of move
  583 000004EC         ; R2 - row of move
  584 000004EC         ; R3 - address of board
  585 000004EC         ; return values:
  586 000004EC         ; R0 - boolean if winning move or not
  587 000004EC         
  588 000004EC E92D47F0 
                       checkWinDBot
                               PUSH{R4-R10,     lr}
  589 000004F0 E1A04000        MOV              R4, R0      ;



ARM Macro Assembler    Page 14 


  590 000004F4 E1A05001        MOV              R5, R1      ; col
  591 000004F8 E1A06002        MOV              R6, R2      ; row
  592 000004FC E1A07003        MOV              R7, R3      ;
  593 00000500 E3A00000        MOV              R0, #0
  594 00000504 E3A0B000        LDR              R11, = 0    ; count
  595 00000508         
  596 00000508         checkWinDBot3
  597 00000508 E3550000        CMP              R5, #0      ; removes 1 from co
                                                            lumn and adds 1 to 
                                                            row until row and c
                                                            olumn is in bottom 
                                                            left position
  598 0000050C 0A000004        BEQ              checkWinDBot2
  599 00000510 E3560005        CMP              R6, #5
  600 00000514 0A000002        BEQ              checkWinDBot2
  601 00000518 E2455001        SUB              R5, R5, #1
  602 0000051C E2866001        ADD              R6, R6, #1
  603 00000520 EAFFFFF8        B                checkWinDBot3
  604 00000524         
  605 00000524         checkWinDBot2
  606 00000524 E0878005        ADD              R8, R7, R5  ; caluclates the ch
                                                            ar address in board
                                                             using the row and 
                                                            column
  607 00000528 E3A0A007        LDR              R10, =COLS
  608 0000052C E0090A96        MUL              R9, R6, R10
  609 00000530 E0888009        ADD              R8, R8, R9
  610 00000534 E5D89000        LDRB             R9, [R8]
  611 00000538 E1590004        CMP              R9, R4      ; checks if char is
                                                             same as current pl
                                                            ayer
  612 0000053C 0A000001        BEQ              checkWinDBot4
  613 00000540 E3A0B000        MOV              R11, #0     ; reset count
  614 00000544 EA000003        B                checkWinDBot5
  615 00000548         
  616 00000548         checkWinDBot4
  617 00000548 E28BB001        ADD              R11, R11, #1 ; increments count
                                                            
  618 0000054C E35B0004        CMP              R11, #4     ; checks if count i
                                                            s at least 4 and is
                                                             so returns winner
  619 00000550 0A000007        BEQ              checkWinDBot6
  620 00000554 EAFFFFFF        B                checkWinDBot5
  621 00000558         
  622 00000558         checkWinDBot5
  623 00000558 E3550006        CMP              R5, #6      ; increases column 
                                                            and decreases row u
                                                            ntil current char i
                                                            s in the top right 
                                                            most position
  624 0000055C 0A000005        BEQ              checkWinDBot1
  625 00000560 E3560000        CMP              R6, #0
  626 00000564 0A000003        BEQ              checkWinDBot1
  627 00000568 E2855001        ADD              R5, R5, #1
  628 0000056C E2466001        SUB              R6, R6, #1
  629 00000570 EAFFFFEB        B                checkWinDBot2
  630 00000574         
  631 00000574         
  632 00000574         checkWinDBot6



ARM Macro Assembler    Page 15 


  633 00000574 E3A00001        MOV              R0, #1
  634 00000578         
  635 00000578         
  636 00000578         
  637 00000578 E8BD87F0 
                       checkWinDBot1
                               POP{R4-R10,      pc}
  638 0000057C         
  639 0000057C         ; computerMove subroutine
  640 0000057C         ; replaces the other player with the computer and genera
                       tes it's next move
  641 0000057C         ; parameters:
  642 0000057C         ; R0 - char of player1
  643 0000057C         ; R1 - char of computer
  644 0000057C         ; R2 - start address of board
  645 0000057C         ; R3 - previous move
  646 0000057C         ; return values:
  647 0000057C         ; R0 - column of computer move
  648 0000057C         
  649 0000057C E92D47F0 
                       computerMove
                               PUSH{R4-R10,     lr}
  650 00000580 E1A04000        MOV              R4, R0      ; char of player1 p
                                                            iece
  651 00000584 E1A05001        MOV              R5, R1      ; char of computer 
                                                            piece
  652 00000588 E1A06002        MOV              R6, R2      ; start address of 
                                                            board
  653 0000058C E1A0A003        MOV              R10, R3     ; previous move
  654 00000590 E3A07000        LDR              R7, =0      ; current col = 0
  655 00000594 E3A08007        LDR              R8, =COLS   ; end of cols
  656 00000598         computerMove5
  657 00000598 E1570008        CMP              R7, R8      ; current col at en
                                                            d?
  658 0000059C AA000016        BGE              computerMove2
  659 000005A0 E1A00007        MOV              R0, R7      ; col
  660 000005A4 E1A01006        MOV              R1, R6      ; board address
  661 000005A8 EBFFFF27        BL               checkMove
  662 000005AC E3500001        CMP              R0, #1
  663 000005B0 1A00000F        BNE              computerMove3
  664 000005B4 E1A00005        MOV              R0, R5      ; computer piece
  665 000005B8 E1A01007        MOV              R1, R7      ; col
  666 000005BC E1A02006        MOV              R2, R6      ; adress of board
  667 000005C0 EBFFFF2B        BL               makeMove
  668 000005C4         
  669 000005C4 E1A09000        MOV              R9, R0      ; row
  670 000005C8         ;MOV R0, R6
  671 000005C8         ;LDR R1, =SIZE
  672 000005C8         ;BL disBoard
  673 000005C8 E1A02009        MOV              R2, R9      ; row
  674 000005CC E1A00005        MOV              R0, R5      ; computer piece
  675 000005D0 E1A01007        MOV              R1, R7      ; col
  676 000005D4 E1A03006        MOV              R3, R6      ; address of board
  677 000005D8 EBFFFF53        BL               checkWin
  678 000005DC E3500001        CMP              R0, #1
  679 000005E0 0A00002C        BEQ              computerMove4
  680 000005E4 E1A00007        MOV              R0, R7      ; row
  681 000005E8 E1A01009        MOV              R1, R9      ; col
  682 000005EC E1A02006        MOV              R2, R6      ; board address



ARM Macro Assembler    Page 16 


  683 000005F0 EB00002E        BL               clearMove
  684 000005F4         
  685 000005F4         computerMove3
  686 000005F4         ;MOV R0, R6
  687 000005F4         ;LDR R1, =SIZE
  688 000005F4         ;BL disBoard
  689 000005F4 E2877001        ADD              R7, R7, #1
  690 000005F8 EAFFFFE6        B                computerMove5
  691 000005FC         
  692 000005FC         
  693 000005FC         computerMove2
  694 000005FC E3A07000        LDR              R7, =0      ; current col = 0
  695 00000600 E3A08007        LDR              R8, =COLS   ; end of cols
  696 00000604         computerMove15
  697 00000604 E1570008        CMP              R7, R8      ; current col at en
                                                            d?
  698 00000608 AA000016        BGE              computerMove12
  699 0000060C E1A00007        MOV              R0, R7      ; col
  700 00000610 E1A01006        MOV              R1, R6      ; board address
  701 00000614 EBFFFF0C        BL               checkMove
  702 00000618 E3500001        CMP              R0, #1
  703 0000061C 1A00000F        BNE              computerMove13
  704 00000620 E1A00004        MOV              R0, R4      ; player piece
  705 00000624 E1A01007        MOV              R1, R7      ; col
  706 00000628 E1A02006        MOV              R2, R6      ; adress of board
  707 0000062C EBFFFF10        BL               makeMove
  708 00000630 E1A09000        MOV              R9, R0      ; row
  709 00000634         ;MOV R0, R6
  710 00000634         ;LDR R1, =SIZE
  711 00000634         ;BL disBoard
  712 00000634 E1A02009        MOV              R2, R9      ; row
  713 00000638 E1A00004        MOV              R0, R4      ; player piece
  714 0000063C E1A01007        MOV              R1, R7      ; col
  715 00000640 E1A03006        MOV              R3, R6      ; address of board
  716 00000644 EBFFFF38        BL               checkWin
  717 00000648 E3500001        CMP              R0, #1
  718 0000064C 0A000011        BEQ              computerMove4
  719 00000650         
  720 00000650 E1A00007        MOV              R0, R7      ; row
  721 00000654 E1A01009        MOV              R1, R9      ; col
  722 00000658 E1A02006        MOV              R2, R6      ; board address
  723 0000065C EB000013        BL               clearMove
  724 00000660         computerMove13
  725 00000660         ;MOV R0, R6
  726 00000660         ;LDR R1, =SIZE
  727 00000660         ;BL disBoard
  728 00000660         
  729 00000660 E2877001        ADD              R7, R7, #1
  730 00000664 EAFFFFE6        B                computerMove15
  731 00000668         
  732 00000668         computerMove12
  733 00000668 E35A0007        CMP              R10, #COLS
  734 0000066C 0A000007        BEQ              computerMove20
  735 00000670 E28AA001        ADD              R10, R10, #1
  736 00000674         computerMove21
  737 00000674 E1A0000A        MOV              R0, R10     ; col
  738 00000678 E1A01006        MOV              R1, R6      ; board address
  739 0000067C EBFFFEF2        BL               checkMove
  740 00000680 E3500001        CMP              R0, #1      ; move valid?



ARM Macro Assembler    Page 17 


  741 00000684 1AFFFFF7        BNE              computerMove12
  742 00000688 E1A0000A        MOV              R0, R10
  743 0000068C EA000006        B                computerMove1
  744 00000690         
  745 00000690         computerMove20
  746 00000690 E3A0A000        MOV              R10, #0
  747 00000694 EAFFFFF6        B                computerMove21
  748 00000698         
  749 00000698         
  750 00000698         computerMove4
  751 00000698 E1A00007        MOV              R0, R7      ; row
  752 0000069C E1A01009        MOV              R1, R9      ; col
  753 000006A0 E1A02006        MOV              R2, R6      ; board address
  754 000006A4 EB000001        BL               clearMove
  755 000006A8 E1A00007        MOV              R0, R7      ; col
  756 000006AC E8BD87F0 
                       computerMove1
                               POP{R4-R10,      pc}
  757 000006B0         
  758 000006B0         
  759 000006B0         ; clearMove subroutine
  760 000006B0         ; removes a piece from the board and replaces it with a 
                       blank '-'
  761 000006B0         ; parameters:
  762 000006B0         ; R0 - col of piece
  763 000006B0         ;  R1 - row of piece
  764 000006B0         ; R2 - start address of board
  765 000006B0         ; return values:
  766 000006B0         ; nothing
  767 000006B0         
  768 000006B0 E92D47F0 
                       clearMove
                               PUSH{R4-R10,     lr}
  769 000006B4 E3A04007        LDR              R4, =COLS   ; number of cols
  770 000006B8 E0040491        MUL              R4, R1, R4  ; find row address 
                                                            of piece
  771 000006BC E0844000        ADD              R4, R4, R0  ; find exact addres
                                                            s of piece
  772 000006C0 E0844002        ADD              R4, R4, R2  ; add this to addre
                                                            ss of board
  773 000006C4 E3A0502D        LDR              R5, =0x2D   ; '-' char
  774 000006C8 E5C45000        STRB             R5, [R4]    ; stores '-' at add
                                                            ress of piece
  775 000006CC         
  776 000006CC E8BD87F0        POP{R4-R10,      pc}
  777 000006D0         
  778 000006D0         ; randomCol subroutine
  779 000006D0         ; returns a random column
  780 000006D0         ; parameters:
  781 000006D0         ; none
  782 000006D0         ; return values:
  783 000006D0         ; R0 - random col
  784 000006D0 E92D47F0 
                       randomMove
                               PUSH{R4-R10,     lr}
  785 000006D4         
  786 000006D4         
  787 000006D4         
  788 000006D4         



ARM Macro Assembler    Page 18 


  789 000006D4 E8BD87F0        POP{R4-R10,      pc}
  790 000006D8         ;
  791 000006D8         ; hint! put the strings used by your program here ...
  792 000006D8         ;
  793 000006D8         
  794 000006D8         
  795 000006D8         
  796 000006D8         str_go
  797 000006D8 4C 65 74 
              27 73 20 
              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 21 
              0A 0D 0A 
              0D 00            DCB              "Let's play Connect4!!",0xA, 0x
D, 0xA, 0xD, 0
  798 000006F2         
  799 000006F2         str_newl
  800 000006F2 0A 0D 00        DCB              0xA, 0xD, 0x0
  801 000006F5         
  802 000006F5         str_turn
  803 000006F5 20 70 6C 
              65 61 73 
              65 20 6D 
              61 6B 65 
              20 79 6F 
              75 72 20 
              6D 6F 76 
              65 20 28 
              31 2D 37 
              29 20 3A 
              20 0A 0D 
              0A 0D 00         DCB              " please make your move (1-7) :
 ", 0xA, 0xD, 0xA, 0xD, 0
  804 00000719         
  805 00000719         str_tryAgain
  806 00000719 20 69 6E 
              76 61 6C 
              69 64 20 
              69 6E 70 
              75 74 20 
              70 6C 65 
              61 73 65 
              20 74 72 
              79 20 61 
              67 61 69 
              6E 3A 20 
              0A 0D 0A 
              0D 00            DCB              " invalid input please try agai
n: ", 0xA, 0xD, 0xA, 0xD, 0
  807 0000073F         
  808 0000073F         str_win
  809 0000073F 43 6F 6E 
              67 72 61 
              74 75 6C 
              61 74 69 
              6F 6E 2C 



ARM Macro Assembler    Page 19 


              20 79 6F 
              75 20 68 
              61 76 65 
              20 77 6F 
              6E 20 70 
              6C 61 79 
              65 72 20 
              00               DCB              "Congratulation, you have won p
layer ", 0
  810 00000764         
  811 00000764         str_help
  812 00000764 31 32 33 
              34 35 36 
              37 0A 0D 
              0A 0D 00         DCB              "1234567",  0xA, 0xD, 0xA, 0xD,
 0
  813 00000770         
  814 00000770         str_draw
  815 00000770 47 61 6D 
              65 20 4F 
              76 65 72 
              2C 20 69 
              74 27 73 
              20 61 20 
              64 72 61 
              77 21 0A 
              0D 0A 0D 
              00               DCB              "Game Over, it's a draw!",  0xA
, 0xD, 0xA, 0xD, 0
  816 0000078C         
  817 0000078C         str_game
  818 0000078C 50 6C 65 
              61 73 65 
              20 70 72 
              65 73 73 
              20 31 20 
              66 6F 72 
              20 61 6E 
              6F 74 68 
              65 72 20 
              70 6C 61 
              79 65 72 
              20 28 32 
              20 66 6F 
              72 20 63 
              6F 6D 70 
              75 74 65 
              72 29 3E 
              20 0A 0D 
              0A 0D 00         DCB              "Please press 1 for another pla
yer (2 for computer)> ",  0xA, 0xD, 0xA, 0xD, 0
  819 000007C5         
  820 000007C5                 END
              00 00 00 
              40010000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 20 


              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 526" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

BOARD 00000000

Symbol: BOARD
   Definitions
      At line 20 in file connect4.s
   Uses
      At line 62 in file connect4.s
      At line 66 in file connect4.s
      At line 85 in file connect4.s
      At line 92 in file connect4.s
      At line 96 in file connect4.s
      At line 104 in file connect4.s
      At line 121 in file connect4.s
      At line 143 in file connect4.s

globals 00000000

Symbol: globals
   Definitions
      At line 19 in file connect4.s
   Uses
      None
Comment: globals unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

L1 000000F8

Symbol: L1
   Definitions
      At line 118 in file connect4.s
   Uses
      At line 88 in file connect4.s
Comment: L1 used once
L100 0000012C

Symbol: L100
   Definitions
      At line 140 in file connect4.s
   Uses
      At line 79 in file connect4.s
Comment: L100 used once
L101 00000098

Symbol: L101
   Definitions
      At line 89 in file connect4.s
   Uses
      At line 148 in file connect4.s
Comment: L101 used once
L110 00000044

Symbol: L110
   Definitions
      At line 61 in file connect4.s
   Uses
      At line 57 in file connect4.s
Comment: L110 used once
L112 0000007C

Symbol: L112
   Definitions
      At line 80 in file connect4.s
   Uses
      At line 77 in file connect4.s
Comment: L112 used once
L2 00000128

Symbol: L2
   Definitions
      At line 137 in file connect4.s
   Uses
      At line 71 in file connect4.s
Comment: L2 used once
L20 00000120

Symbol: L20
   Definitions
      At line 133 in file connect4.s
   Uses
      At line 111 in file connect4.s
Comment: L20 used once
L3 00000064

Symbol: L3



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 73 in file connect4.s
   Uses
      At line 125 in file connect4.s
Comment: L3 used once
L4 0000005C

Symbol: L4
   Definitions
      At line 70 in file connect4.s
   Uses
      At line 117 in file connect4.s
Comment: L4 used once
L5 000000F0

Symbol: L5
   Definitions
      At line 116 in file connect4.s
   Uses
      At line 113 in file connect4.s
Comment: L5 used once
L6 000000F4

Symbol: L6
   Definitions
      At line 117 in file connect4.s
   Uses
      At line 115 in file connect4.s
Comment: L6 used once
L7 00000110

Symbol: L7
   Definitions
      At line 127 in file connect4.s
   Uses
      At line 107 in file connect4.s
Comment: L7 used once
L8 000000D4

Symbol: L8
   Definitions
      At line 109 in file connect4.s
   Uses
      At line 131 in file connect4.s
Comment: L8 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 28 in file connect4.s
   Uses
      None
Comment: RESET unused
checkMove 0000024C

Symbol: checkMove
   Definitions
      At line 290 in file connect4.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 86 in file connect4.s
      At line 661 in file connect4.s
      At line 701 in file connect4.s
      At line 739 in file connect4.s

checkMove2 0000026C

Symbol: checkMove2
   Definitions
      At line 299 in file connect4.s
   Uses
      At line 296 in file connect4.s
Comment: checkMove2 used once
checkMove3 00000258

Symbol: checkMove3
   Definitions
      At line 294 in file connect4.s
   Uses
      None
Comment: checkMove3 unused
checkMove4 00000270

Symbol: checkMove4
   Definitions
      At line 300 in file connect4.s
   Uses
      At line 298 in file connect4.s
Comment: checkMove4 used once
checkWin 0000032C

Symbol: checkWin
   Definitions
      At line 393 in file connect4.s
   Uses
      At line 105 in file connect4.s
      At line 677 in file connect4.s
      At line 716 in file connect4.s

checkWin1 00000398

Symbol: checkWin1
   Definitions
      At line 425 in file connect4.s
   Uses
      At line 402 in file connect4.s
      At line 408 in file connect4.s
      At line 416 in file connect4.s

checkWinCol 0000039C

Symbol: checkWinCol
   Definitions
      At line 438 in file connect4.s
   Uses
      At line 400 in file connect4.s
Comment: checkWinCol used once
checkWinCol1 000003EC




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: checkWinCol1
   Definitions
      At line 464 in file connect4.s
   Uses
      At line 449 in file connect4.s
Comment: checkWinCol1 used once
checkWinCol2 000003D8

Symbol: checkWinCol2
   Definitions
      At line 456 in file connect4.s
   Uses
      At line 452 in file connect4.s
Comment: checkWinCol2 used once
checkWinCol3 000003BC

Symbol: checkWinCol3
   Definitions
      At line 447 in file connect4.s
   Uses
      At line 454 in file connect4.s
      At line 460 in file connect4.s

checkWinCol4 000003E8

Symbol: checkWinCol4
   Definitions
      At line 462 in file connect4.s
   Uses
      At line 459 in file connect4.s
Comment: checkWinCol4 used once
checkWinDBot 000004EC

Symbol: checkWinDBot
   Definitions
      At line 588 in file connect4.s
   Uses
      At line 422 in file connect4.s
Comment: checkWinDBot used once
checkWinDBot1 00000578

Symbol: checkWinDBot1
   Definitions
      At line 637 in file connect4.s
   Uses
      At line 624 in file connect4.s
      At line 626 in file connect4.s

checkWinDBot2 00000524

Symbol: checkWinDBot2
   Definitions
      At line 605 in file connect4.s
   Uses
      At line 598 in file connect4.s
      At line 600 in file connect4.s
      At line 629 in file connect4.s

checkWinDBot3 00000508



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: checkWinDBot3
   Definitions
      At line 596 in file connect4.s
   Uses
      At line 603 in file connect4.s
Comment: checkWinDBot3 used once
checkWinDBot4 00000548

Symbol: checkWinDBot4
   Definitions
      At line 616 in file connect4.s
   Uses
      At line 612 in file connect4.s
Comment: checkWinDBot4 used once
checkWinDBot5 00000558

Symbol: checkWinDBot5
   Definitions
      At line 622 in file connect4.s
   Uses
      At line 614 in file connect4.s
      At line 620 in file connect4.s

checkWinDBot6 00000574

Symbol: checkWinDBot6
   Definitions
      At line 632 in file connect4.s
   Uses
      At line 619 in file connect4.s
Comment: checkWinDBot6 used once
checkWinDTop 0000045C

Symbol: checkWinDTop
   Definitions
      At line 529 in file connect4.s
   Uses
      At line 414 in file connect4.s
Comment: checkWinDTop used once
checkWinDTop1 000004E8

Symbol: checkWinDTop1
   Definitions
      At line 576 in file connect4.s
   Uses
      At line 565 in file connect4.s
      At line 567 in file connect4.s

checkWinDTop2 00000494

Symbol: checkWinDTop2
   Definitions
      At line 546 in file connect4.s
   Uses
      At line 539 in file connect4.s
      At line 541 in file connect4.s
      At line 570 in file connect4.s




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

checkWinDTop3 00000478

Symbol: checkWinDTop3
   Definitions
      At line 537 in file connect4.s
   Uses
      At line 544 in file connect4.s
Comment: checkWinDTop3 used once
checkWinDTop4 000004B8

Symbol: checkWinDTop4
   Definitions
      At line 557 in file connect4.s
   Uses
      At line 553 in file connect4.s
Comment: checkWinDTop4 used once
checkWinDTop5 000004C8

Symbol: checkWinDTop5
   Definitions
      At line 563 in file connect4.s
   Uses
      At line 555 in file connect4.s
      At line 561 in file connect4.s

checkWinDTop6 000004E4

Symbol: checkWinDTop6
   Definitions
      At line 573 in file connect4.s
   Uses
      At line 560 in file connect4.s
Comment: checkWinDTop6 used once
checkWinRow 000003F0

Symbol: checkWinRow
   Definitions
      At line 476 in file connect4.s
   Uses
      At line 406 in file connect4.s
Comment: checkWinRow used once
checkWinRow1 00000434

Symbol: checkWinRow1
   Definitions
      At line 497 in file connect4.s
   Uses
      At line 502 in file connect4.s
Comment: checkWinRow1 used once
checkWinRow2 00000438

Symbol: checkWinRow2
   Definitions
      At line 500 in file connect4.s
   Uses
      At line 485 in file connect4.s
Comment: checkWinRow2 used once
checkWinRow3 00000424




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: checkWinRow3
   Definitions
      At line 492 in file connect4.s
   Uses
      At line 488 in file connect4.s
Comment: checkWinRow3 used once
checkWinRow4 00000408

Symbol: checkWinRow4
   Definitions
      At line 483 in file connect4.s
   Uses
      At line 490 in file connect4.s
      At line 495 in file connect4.s

clearMove 000006B0

Symbol: clearMove
   Definitions
      At line 768 in file connect4.s
   Uses
      At line 683 in file connect4.s
      At line 723 in file connect4.s
      At line 754 in file connect4.s

computerMove 0000057C

Symbol: computerMove
   Definitions
      At line 649 in file connect4.s
   Uses
      At line 145 in file connect4.s
Comment: computerMove used once
computerMove1 000006AC

Symbol: computerMove1
   Definitions
      At line 756 in file connect4.s
   Uses
      At line 743 in file connect4.s
Comment: computerMove1 used once
computerMove12 00000668

Symbol: computerMove12
   Definitions
      At line 732 in file connect4.s
   Uses
      At line 698 in file connect4.s
      At line 741 in file connect4.s

computerMove13 00000660

Symbol: computerMove13
   Definitions
      At line 724 in file connect4.s
   Uses
      At line 703 in file connect4.s
Comment: computerMove13 used once
computerMove15 00000604



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols


Symbol: computerMove15
   Definitions
      At line 696 in file connect4.s
   Uses
      At line 730 in file connect4.s
Comment: computerMove15 used once
computerMove2 000005FC

Symbol: computerMove2
   Definitions
      At line 693 in file connect4.s
   Uses
      At line 658 in file connect4.s
Comment: computerMove2 used once
computerMove20 00000690

Symbol: computerMove20
   Definitions
      At line 745 in file connect4.s
   Uses
      At line 734 in file connect4.s
Comment: computerMove20 used once
computerMove21 00000674

Symbol: computerMove21
   Definitions
      At line 736 in file connect4.s
   Uses
      At line 747 in file connect4.s
Comment: computerMove21 used once
computerMove3 000005F4

Symbol: computerMove3
   Definitions
      At line 685 in file connect4.s
   Uses
      At line 663 in file connect4.s
Comment: computerMove3 used once
computerMove4 00000698

Symbol: computerMove4
   Definitions
      At line 750 in file connect4.s
   Uses
      At line 679 in file connect4.s
      At line 718 in file connect4.s

computerMove5 00000598

Symbol: computerMove5
   Definitions
      At line 656 in file connect4.s
   Uses
      At line 690 in file connect4.s
Comment: computerMove5 used once
disBoard 000001D0

Symbol: disBoard



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 236 in file connect4.s
   Uses
      At line 68 in file connect4.s
      At line 98 in file connect4.s
      At line 123 in file connect4.s

disBoard1 00000214

Symbol: disBoard1
   Definitions
      At line 254 in file connect4.s
   Uses
      At line 242 in file connect4.s
Comment: disBoard1 used once
disBoard2 00000210

Symbol: disBoard2
   Definitions
      At line 252 in file connect4.s
   Uses
      At line 248 in file connect4.s
Comment: disBoard2 used once
disBoard3 000001E4

Symbol: disBoard3
   Definitions
      At line 241 in file connect4.s
   Uses
      At line 252 in file connect4.s
Comment: disBoard3 used once
disMove 000002B0

Symbol: disMove
   Definitions
      At line 336 in file connect4.s
   Uses
      At line 74 in file connect4.s
Comment: disMove used once
disMove1 000002D4

Symbol: disMove1
   Definitions
      At line 345 in file connect4.s
   Uses
      At line 342 in file connect4.s
Comment: disMove1 used once
disMove2 000002D0

Symbol: disMove2
   Definitions
      At line 344 in file connect4.s
   Uses
      At line 346 in file connect4.s
Comment: disMove2 used once
disWinner 00000440

Symbol: disWinner
   Definitions



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 511 in file connect4.s
   Uses
      At line 129 in file connect4.s
Comment: disWinner used once
get 00000168

Symbol: get
   Definitions
      At line 183 in file connect4.s
   Uses
      At line 55 in file connect4.s
      At line 358 in file connect4.s

get0 0000016C

Symbol: get0
   Definitions
      At line 184 in file connect4.s
   Uses
      At line 186 in file connect4.s
Comment: get0 used once
initBoard 00000220

Symbol: initBoard
   Definitions
      At line 268 in file connect4.s
   Uses
      At line 64 in file connect4.s
Comment: initBoard used once
initBoard1 00000248

Symbol: initBoard1
   Definitions
      At line 280 in file connect4.s
   Uses
      At line 274 in file connect4.s
Comment: initBoard1 used once
initBoard2 00000230

Symbol: initBoard2
   Definitions
      At line 273 in file connect4.s
   Uses
      At line 278 in file connect4.s
Comment: initBoard2 used once
inithw 0000014C

Symbol: inithw
   Definitions
      At line 166 in file connect4.s
   Uses
      At line 36 in file connect4.s
Comment: inithw used once
makeMove 00000274

Symbol: makeMove
   Definitions
      At line 311 in file connect4.s
   Uses



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 93 in file connect4.s
      At line 667 in file connect4.s
      At line 707 in file connect4.s

makeMove2 000002A4

Symbol: makeMove2
   Definitions
      At line 324 in file connect4.s
   Uses
      At line 319 in file connect4.s
Comment: makeMove2 used once
makeMove3 00000288

Symbol: makeMove3
   Definitions
      At line 316 in file connect4.s
   Uses
      At line 322 in file connect4.s
Comment: makeMove3 used once
put 00000184

Symbol: put
   Definitions
      At line 199 in file connect4.s
   Uses
      At line 202 in file connect4.s
      At line 224 in file connect4.s
      At line 246 in file connect4.s
      At line 338 in file connect4.s
      At line 359 in file connect4.s
      At line 516 in file connect4.s

put0 0000019C

Symbol: put0
   Definitions
      At line 205 in file connect4.s
   Uses
      At line 208 in file connect4.s
Comment: put0 used once
puts 000001B0

Symbol: puts
   Definitions
      At line 219 in file connect4.s
   Uses
      At line 52 in file connect4.s
      At line 54 in file connect4.s
      At line 120 in file connect4.s
      At line 135 in file connect4.s
      At line 251 in file connect4.s
      At line 256 in file connect4.s
      At line 340 in file connect4.s
      At line 370 in file connect4.s
      At line 372 in file connect4.s
      At line 378 in file connect4.s
      At line 514 in file connect4.s




ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

puts0 000001B8

Symbol: puts0
   Definitions
      At line 221 in file connect4.s
   Uses
      At line 225 in file connect4.s
Comment: puts0 used once
puts1 000001CC

Symbol: puts1
   Definitions
      At line 226 in file connect4.s
   Uses
      At line 223 in file connect4.s
Comment: puts1 used once
randomMove 000006D0

Symbol: randomMove
   Definitions
      At line 784 in file connect4.s
   Uses
      None
Comment: randomMove unused
stop 00000128

Symbol: stop
   Definitions
      At line 138 in file connect4.s
   Uses
      At line 138 in file connect4.s
Comment: stop used once
str_draw 00000770

Symbol: str_draw
   Definitions
      At line 814 in file connect4.s
   Uses
      At line 134 in file connect4.s
Comment: str_draw used once
str_game 0000078C

Symbol: str_game
   Definitions
      At line 817 in file connect4.s
   Uses
      At line 53 in file connect4.s
Comment: str_game used once
str_go 000006D8

Symbol: str_go
   Definitions
      At line 796 in file connect4.s
   Uses
      At line 50 in file connect4.s
Comment: str_go used once
str_help 00000764

Symbol: str_help



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 811 in file connect4.s
   Uses
      At line 255 in file connect4.s
Comment: str_help used once
str_newl 000006F2

Symbol: str_newl
   Definitions
      At line 799 in file connect4.s
   Uses
      At line 249 in file connect4.s
      At line 369 in file connect4.s
      At line 371 in file connect4.s

str_tryAgain 00000719

Symbol: str_tryAgain
   Definitions
      At line 805 in file connect4.s
   Uses
      At line 119 in file connect4.s
      At line 377 in file connect4.s

str_turn 000006F5

Symbol: str_turn
   Definitions
      At line 802 in file connect4.s
   Uses
      At line 339 in file connect4.s
Comment: str_turn used once
str_win 0000073F

Symbol: str_win
   Definitions
      At line 808 in file connect4.s
   Uses
      At line 513 in file connect4.s
Comment: str_win used once
takeMove 000002DC

Symbol: takeMove
   Definitions
      At line 357 in file connect4.s
   Uses
      At line 81 in file connect4.s
Comment: takeMove used once
takeMove1 00000320

Symbol: takeMove1
   Definitions
      At line 376 in file connect4.s
   Uses
      At line 364 in file connect4.s
      At line 366 in file connect4.s

takeMove2 000002E0




ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols

Symbol: takeMove2
   Definitions
      At line 358 in file connect4.s
   Uses
      At line 379 in file connect4.s
Comment: takeMove2 used once
91 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COLS 00000007

Symbol: COLS
   Definitions
      At line 16 in file connect4.s
   Uses
      At line 293 in file connect4.s
      At line 314 in file connect4.s
      At line 361 in file connect4.s
      At line 444 in file connect4.s
      At line 478 in file connect4.s
      At line 548 in file connect4.s
      At line 607 in file connect4.s
      At line 655 in file connect4.s
      At line 695 in file connect4.s
      At line 733 in file connect4.s
      At line 769 in file connect4.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 167 in file connect4.s
Comment: PINSEL0 used once
ROWS 00000006

Symbol: ROWS
   Definitions
      At line 15 in file connect4.s
   Uses
      None
Comment: ROWS unused
SIZE 0000002A

Symbol: SIZE
   Definitions
      At line 14 in file connect4.s
   Uses
      At line 63 in file connect4.s
      At line 67 in file connect4.s
      At line 97 in file connect4.s
      At line 110 in file connect4.s
      At line 122 in file connect4.s
      At line 445 in file connect4.s

U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 170 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 12 in file connect4.s
   Uses
      At line 183 in file connect4.s
      At line 199 in file connect4.s
      At line 205 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 9 in file connect4.s
   Uses
      At line 187 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 10 in file connect4.s
   Uses
      At line 203 in file connect4.s
Comment: U0THR used once
8 symbols
435 symbols in table
